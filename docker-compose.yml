# ============================================================================
# docker-compose.yml
# ============================================================================
version: '3.8'

services:
  # Application Services
  api:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DB_URL=postgresql+asyncpg://postgres:password@db:5432/crypto_trading
      - DB_REDIS_URL=redis://redis:6379/0
      - DEBUG=true
      - SECRET_KEY=your-secret-key-change-in-production
    depends_on:
      - db
      - redis
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    command: uvicorn src.api.app:app --host 0.0.0.0 --port 8000 --reload

  worker:
    build: .
    environment:
      - DB_URL=postgresql+asyncpg://postgres:password@db:5432/crypto_trading
      - DB_REDIS_URL=redis://redis:6379/0
      - DEBUG=true
    depends_on:
      - db
      - redis
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    command: celery -A src.workers.celery_app worker --loglevel=info

  scheduler:
    build: .
    environment:
      - DB_URL=postgresql+asyncpg://postgres:password@db:5432/crypto_trading
      - DB_REDIS_URL=redis://redis:6379/0
      - DEBUG=true
    depends_on:
      - db
      - redis
    volumes:
      - ./config:/app/config
    restart: unless-stopped
    command: celery -A src.workers.celery_app beat --loglevel=info

  # Database Services
  db:
    image: timescale/timescaledb:latest-pg15
    environment:
      - POSTGRES_DB=crypto_trading
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/setup/init_database.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: